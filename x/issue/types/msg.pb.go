// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgIssueCreate struct {
	Owner        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner"`
	Issuer       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=issuer,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"issuer"`
	*IssueParams `protobuf:"bytes,3,opt,name=issue_params,json=issueParams,proto3,embedded=issue_params" json:"issue_params,omitempty"`
}

func (m *MsgIssueCreate) Reset()         { *m = MsgIssueCreate{} }
func (m *MsgIssueCreate) String() string { return proto.CompactTextString(m) }
func (*MsgIssueCreate) ProtoMessage()    {}
func (*MsgIssueCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{0}
}
func (m *MsgIssueCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueCreate.Merge(m, src)
}
func (m *MsgIssueCreate) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueCreate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueCreate proto.InternalMessageInfo

type MsgDescription struct {
	Owner       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner"`
	Denom       string                                        `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Description string                                        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *MsgDescription) Reset()         { *m = MsgDescription{} }
func (m *MsgDescription) String() string { return proto.CompactTextString(m) }
func (*MsgDescription) ProtoMessage()    {}
func (*MsgDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{1}
}
func (m *MsgDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDescription.Merge(m, src)
}
func (m *MsgDescription) XXX_Size() int {
	return m.Size()
}
func (m *MsgDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDescription.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDescription proto.InternalMessageInfo

func (m *MsgDescription) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgDescription) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type MsgDisableFeature struct {
	Owner   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner"`
	Denom   string                                        `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Feature string                                        `protobuf:"bytes,3,opt,name=feature,proto3" json:"feature,omitempty"`
}

func (m *MsgDisableFeature) Reset()         { *m = MsgDisableFeature{} }
func (m *MsgDisableFeature) String() string { return proto.CompactTextString(m) }
func (*MsgDisableFeature) ProtoMessage()    {}
func (*MsgDisableFeature) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{2}
}
func (m *MsgDisableFeature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableFeature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableFeature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableFeature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableFeature.Merge(m, src)
}
func (m *MsgDisableFeature) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableFeature) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableFeature.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableFeature proto.InternalMessageInfo

func (m *MsgDisableFeature) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgDisableFeature) GetFeature() string {
	if m != nil {
		return m.Feature
	}
	return ""
}

type MsgEnableFeature struct {
	Owner   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner"`
	Denom   string                                        `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Feature string                                        `protobuf:"bytes,3,opt,name=feature,proto3" json:"feature,omitempty"`
}

func (m *MsgEnableFeature) Reset()         { *m = MsgEnableFeature{} }
func (m *MsgEnableFeature) String() string { return proto.CompactTextString(m) }
func (*MsgEnableFeature) ProtoMessage()    {}
func (*MsgEnableFeature) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{3}
}
func (m *MsgEnableFeature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEnableFeature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEnableFeature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEnableFeature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEnableFeature.Merge(m, src)
}
func (m *MsgEnableFeature) XXX_Size() int {
	return m.Size()
}
func (m *MsgEnableFeature) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEnableFeature.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEnableFeature proto.InternalMessageInfo

func (m *MsgEnableFeature) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgEnableFeature) GetFeature() string {
	if m != nil {
		return m.Feature
	}
	return ""
}

type MsgFeatures struct {
	Owner          github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner"`
	Denom          string                                        `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	*IssueFeatures `protobuf:"bytes,3,opt,name=issue_features,json=issueFeatures,proto3,embedded=issue_features" json:"issue_features,omitempty"`
}

func (m *MsgFeatures) Reset()         { *m = MsgFeatures{} }
func (m *MsgFeatures) String() string { return proto.CompactTextString(m) }
func (*MsgFeatures) ProtoMessage()    {}
func (*MsgFeatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{4}
}
func (m *MsgFeatures) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFeatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFeatures.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFeatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFeatures.Merge(m, src)
}
func (m *MsgFeatures) XXX_Size() int {
	return m.Size()
}
func (m *MsgFeatures) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFeatures.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFeatures proto.InternalMessageInfo

func (m *MsgFeatures) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type MsgTransfer struct {
	FromAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"from_address"`
	ToAddress   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"to_address"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgTransfer) Reset()         { *m = MsgTransfer{} }
func (m *MsgTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgTransfer) ProtoMessage()    {}
func (*MsgTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{5}
}
func (m *MsgTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransfer.Merge(m, src)
}
func (m *MsgTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransfer proto.InternalMessageInfo

type MsgTransferFrom struct {
	Sender      github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender"`
	FromAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"from_address"`
	ToAddress   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=to_address,json=toAddress,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"to_address"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgTransferFrom) Reset()         { *m = MsgTransferFrom{} }
func (m *MsgTransferFrom) String() string { return proto.CompactTextString(m) }
func (*MsgTransferFrom) ProtoMessage()    {}
func (*MsgTransferFrom) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{6}
}
func (m *MsgTransferFrom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferFrom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferFrom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferFrom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferFrom.Merge(m, src)
}
func (m *MsgTransferFrom) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferFrom) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferFrom.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferFrom proto.InternalMessageInfo

type MsgTransferOwnership struct {
	Owner     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner"`
	ToAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"to_address"`
	Denom     string                                        `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgTransferOwnership) Reset()         { *m = MsgTransferOwnership{} }
func (m *MsgTransferOwnership) String() string { return proto.CompactTextString(m) }
func (*MsgTransferOwnership) ProtoMessage()    {}
func (*MsgTransferOwnership) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{7}
}
func (m *MsgTransferOwnership) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferOwnership) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferOwnership.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferOwnership) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferOwnership.Merge(m, src)
}
func (m *MsgTransferOwnership) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferOwnership) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferOwnership.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferOwnership proto.InternalMessageInfo

func (m *MsgTransferOwnership) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type MsgApprove struct {
	Owner   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner"`
	Spender github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=spender,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"spender"`
	Amount  github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgApprove) Reset()         { *m = MsgApprove{} }
func (m *MsgApprove) String() string { return proto.CompactTextString(m) }
func (*MsgApprove) ProtoMessage()    {}
func (*MsgApprove) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{8}
}
func (m *MsgApprove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApprove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApprove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApprove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApprove.Merge(m, src)
}
func (m *MsgApprove) XXX_Size() int {
	return m.Size()
}
func (m *MsgApprove) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApprove.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApprove proto.InternalMessageInfo

type MsgIncreaseAllowance struct {
	Owner   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner"`
	Spender github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=spender,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"spender"`
	Amount  github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgIncreaseAllowance) Reset()         { *m = MsgIncreaseAllowance{} }
func (m *MsgIncreaseAllowance) String() string { return proto.CompactTextString(m) }
func (*MsgIncreaseAllowance) ProtoMessage()    {}
func (*MsgIncreaseAllowance) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{9}
}
func (m *MsgIncreaseAllowance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIncreaseAllowance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIncreaseAllowance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIncreaseAllowance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIncreaseAllowance.Merge(m, src)
}
func (m *MsgIncreaseAllowance) XXX_Size() int {
	return m.Size()
}
func (m *MsgIncreaseAllowance) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIncreaseAllowance.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIncreaseAllowance proto.InternalMessageInfo

type MsgDecreaseAllowance struct {
	Owner   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner"`
	Spender github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=spender,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"spender"`
	Amount  github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgDecreaseAllowance) Reset()         { *m = MsgDecreaseAllowance{} }
func (m *MsgDecreaseAllowance) String() string { return proto.CompactTextString(m) }
func (*MsgDecreaseAllowance) ProtoMessage()    {}
func (*MsgDecreaseAllowance) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{10}
}
func (m *MsgDecreaseAllowance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDecreaseAllowance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDecreaseAllowance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDecreaseAllowance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDecreaseAllowance.Merge(m, src)
}
func (m *MsgDecreaseAllowance) XXX_Size() int {
	return m.Size()
}
func (m *MsgDecreaseAllowance) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDecreaseAllowance.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDecreaseAllowance proto.InternalMessageInfo

type MsgMint struct {
	Minter    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=minter,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"minter"`
	ToAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"to_address"`
	Amount    github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgMint) Reset()         { *m = MsgMint{} }
func (m *MsgMint) String() string { return proto.CompactTextString(m) }
func (*MsgMint) ProtoMessage()    {}
func (*MsgMint) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{11}
}
func (m *MsgMint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMint.Merge(m, src)
}
func (m *MsgMint) XXX_Size() int {
	return m.Size()
}
func (m *MsgMint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMint proto.InternalMessageInfo

type MsgBurn struct {
	Burner github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=burner,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"burner"`
	Amount github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgBurn) Reset()         { *m = MsgBurn{} }
func (m *MsgBurn) String() string { return proto.CompactTextString(m) }
func (*MsgBurn) ProtoMessage()    {}
func (*MsgBurn) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{12}
}
func (m *MsgBurn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurn.Merge(m, src)
}
func (m *MsgBurn) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurn) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurn.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurn proto.InternalMessageInfo

type MsgBurnFrom struct {
	Burner      github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=burner,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"burner"`
	FromAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"from_address"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgBurnFrom) Reset()         { *m = MsgBurnFrom{} }
func (m *MsgBurnFrom) String() string { return proto.CompactTextString(m) }
func (*MsgBurnFrom) ProtoMessage()    {}
func (*MsgBurnFrom) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{13}
}
func (m *MsgBurnFrom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnFrom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnFrom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnFrom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnFrom.Merge(m, src)
}
func (m *MsgBurnFrom) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnFrom) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnFrom.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnFrom proto.InternalMessageInfo

type MsgFreeze struct {
	Freezer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=freezer,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"freezer"`
	Holder  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=holder,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"holder"`
	Denom   string                                        `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Op      string                                        `protobuf:"bytes,4,opt,name=op,proto3" json:"op,omitempty"`
}

func (m *MsgFreeze) Reset()         { *m = MsgFreeze{} }
func (m *MsgFreeze) String() string { return proto.CompactTextString(m) }
func (*MsgFreeze) ProtoMessage()    {}
func (*MsgFreeze) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{14}
}
func (m *MsgFreeze) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFreeze) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFreeze.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFreeze) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFreeze.Merge(m, src)
}
func (m *MsgFreeze) XXX_Size() int {
	return m.Size()
}
func (m *MsgFreeze) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFreeze.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFreeze proto.InternalMessageInfo

func (m *MsgFreeze) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgFreeze) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

type MsgUnfreeze struct {
	Freezer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=freezer,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"freezer"`
	Holder  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=holder,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"holder"`
	Denom   string                                        `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Op      string                                        `protobuf:"bytes,4,opt,name=op,proto3" json:"op,omitempty"`
}

func (m *MsgUnfreeze) Reset()         { *m = MsgUnfreeze{} }
func (m *MsgUnfreeze) String() string { return proto.CompactTextString(m) }
func (*MsgUnfreeze) ProtoMessage()    {}
func (*MsgUnfreeze) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{15}
}
func (m *MsgUnfreeze) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnfreeze) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnfreeze.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnfreeze) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnfreeze.Merge(m, src)
}
func (m *MsgUnfreeze) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnfreeze) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnfreeze.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnfreeze proto.InternalMessageInfo

func (m *MsgUnfreeze) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgUnfreeze) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgIssueCreate)(nil), "konstellation.sdk.issue.MsgIssueCreate")
	proto.RegisterType((*MsgDescription)(nil), "konstellation.sdk.issue.MsgDescription")
	proto.RegisterType((*MsgDisableFeature)(nil), "konstellation.sdk.issue.MsgDisableFeature")
	proto.RegisterType((*MsgEnableFeature)(nil), "konstellation.sdk.issue.MsgEnableFeature")
	proto.RegisterType((*MsgFeatures)(nil), "konstellation.sdk.issue.MsgFeatures")
	proto.RegisterType((*MsgTransfer)(nil), "konstellation.sdk.issue.MsgTransfer")
	proto.RegisterType((*MsgTransferFrom)(nil), "konstellation.sdk.issue.MsgTransferFrom")
	proto.RegisterType((*MsgTransferOwnership)(nil), "konstellation.sdk.issue.MsgTransferOwnership")
	proto.RegisterType((*MsgApprove)(nil), "konstellation.sdk.issue.MsgApprove")
	proto.RegisterType((*MsgIncreaseAllowance)(nil), "konstellation.sdk.issue.MsgIncreaseAllowance")
	proto.RegisterType((*MsgDecreaseAllowance)(nil), "konstellation.sdk.issue.MsgDecreaseAllowance")
	proto.RegisterType((*MsgMint)(nil), "konstellation.sdk.issue.MsgMint")
	proto.RegisterType((*MsgBurn)(nil), "konstellation.sdk.issue.MsgBurn")
	proto.RegisterType((*MsgBurnFrom)(nil), "konstellation.sdk.issue.MsgBurnFrom")
	proto.RegisterType((*MsgFreeze)(nil), "konstellation.sdk.issue.MsgFreeze")
	proto.RegisterType((*MsgUnfreeze)(nil), "konstellation.sdk.issue.MsgUnfreeze")
}

func init() { proto.RegisterFile("msg.proto", fileDescriptor_c06e4cca6c2cc899) }

var fileDescriptor_c06e4cca6c2cc899 = []byte{
	// 1073 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x98, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xc0, 0x33, 0x4e, 0x9b, 0xc8, 0xe3, 0x26, 0x69, 0x57, 0x41, 0x0d, 0xdb, 0xd4, 0x31, 0x5b,
	0xd3, 0x18, 0x24, 0xaf, 0x69, 0x11, 0x1f, 0x20, 0x6e, 0xa9, 0x5a, 0x21, 0xab, 0xc8, 0x14, 0x09,
	0x71, 0xb1, 0xc6, 0xf6, 0x78, 0xb3, 0xca, 0xee, 0xcc, 0x32, 0xb3, 0x9b, 0x02, 0x42, 0x02, 0x15,
	0x21, 0x0e, 0x1c, 0x5a, 0x09, 0xb8, 0x72, 0xe0, 0xbb, 0x20, 0xf5, 0x46, 0x50, 0x2f, 0xa8, 0x87,
	0x08, 0x25, 0x7c, 0x04, 0x0e, 0x48, 0x48, 0x08, 0xcd, 0x9f, 0xdd, 0xac, 0x6b, 0x67, 0x59, 0x69,
	0x9d, 0xaa, 0x6a, 0x2e, 0xc9, 0xfe, 0x79, 0xfb, 0xde, 0xef, 0xbd, 0x79, 0x6f, 0xde, 0x1b, 0xc3,
	0xb2, 0xcf, 0x1d, 0x3b, 0x60, 0x34, 0xa4, 0xc6, 0xc5, 0x1d, 0x4a, 0x78, 0x88, 0x3d, 0x0f, 0x85,
	0x2e, 0x25, 0x36, 0x1f, 0xee, 0xd8, 0x2e, 0xe7, 0x11, 0x36, 0x57, 0x1d, 0xea, 0x50, 0x29, 0xd3,
	0x12, 0x57, 0x4a, 0xdc, 0x5c, 0x77, 0x28, 0x75, 0x3c, 0xdc, 0x42, 0x81, 0xdb, 0x42, 0x84, 0xd0,
	0x50, 0x7e, 0xc6, 0xf5, 0xdb, 0x8b, 0x03, 0xca, 0x7d, 0xca, 0x7b, 0xea, 0x33, 0xd4, 0x1f, 0xb8,
	0xfa, 0xc5, 0xd2, 0x27, 0x11, 0x66, 0x2e, 0x66, 0xea, 0xd6, 0xfa, 0x07, 0xc0, 0xe5, 0x0e, 0x77,
	0xee, 0x08, 0x43, 0x37, 0x18, 0x46, 0x21, 0x36, 0xde, 0x83, 0x67, 0xe9, 0x7d, 0x82, 0xd9, 0x1a,
	0xa8, 0x81, 0x46, 0xb9, 0xfd, 0xce, 0xe3, 0xfd, 0x8d, 0xb9, 0xa7, 0xfb, 0x1b, 0x4d, 0xc7, 0x0d,
	0xb7, 0xa3, 0xbe, 0x3d, 0xa0, 0x7e, 0x4b, 0x29, 0xd7, 0xff, 0x9a, 0x7c, 0xb8, 0xd3, 0x0a, 0x3f,
	0x0b, 0x30, 0xb7, 0xb7, 0x06, 0x83, 0xad, 0xe1, 0x90, 0x61, 0xce, 0xbb, 0x4a, 0x87, 0xd1, 0x81,
	0x0b, 0xd2, 0x09, 0xb6, 0x56, 0x2a, 0xa2, 0x4d, 0x2b, 0x31, 0x3a, 0xf0, 0x9c, 0xbc, 0xea, 0x05,
	0x88, 0x21, 0x9f, 0xaf, 0xcd, 0xd7, 0x40, 0xa3, 0x72, 0xbd, 0x6e, 0x1f, 0x13, 0x3a, 0x5b, 0xfa,
	0xf5, 0xbe, 0x94, 0x6d, 0x9f, 0xd9, 0xdb, 0xdf, 0x00, 0xdd, 0x8a, 0x7b, 0xf4, 0xc8, 0xfa, 0x51,
	0x79, 0x7f, 0x13, 0xf3, 0x01, 0x73, 0x03, 0xf1, 0xed, 0x6c, 0xbd, 0x5f, 0x85, 0x67, 0x87, 0x98,
	0x50, 0x5f, 0x39, 0xdf, 0x55, 0x37, 0x46, 0x0d, 0x56, 0x86, 0x47, 0x16, 0xa5, 0x0f, 0xe5, 0x6e,
	0xfa, 0x91, 0xf5, 0x08, 0xc0, 0x0b, 0x82, 0xcb, 0xe5, 0xa8, 0xef, 0xe1, 0x5b, 0x18, 0x85, 0x11,
	0xc3, 0xcf, 0x03, 0x6d, 0x0d, 0x2e, 0x8e, 0x94, 0x35, 0x8d, 0x15, 0xdf, 0x5a, 0x0f, 0x01, 0x3c,
	0xdf, 0xe1, 0xce, 0xbb, 0xe4, 0x85, 0x21, 0xfa, 0x05, 0xc0, 0x4a, 0x87, 0x3b, 0x9a, 0x85, 0x3f,
	0x0f, 0x98, 0x0f, 0xe0, 0xb2, 0x4a, 0x3f, 0xcd, 0x10, 0x27, 0xe0, 0xd5, 0xec, 0x04, 0x8c, 0x11,
	0x75, 0x0a, 0x2e, 0xb9, 0xe9, 0x87, 0xd6, 0xb7, 0x25, 0xe9, 0xc7, 0x3d, 0x86, 0x08, 0x1f, 0x61,
	0x66, 0x7c, 0x04, 0xcf, 0x8d, 0x18, 0xf5, 0x7b, 0x48, 0x11, 0x15, 0x73, 0xa7, 0x22, 0x54, 0xe9,
	0x1b, 0xe3, 0x1e, 0x84, 0x21, 0x4d, 0xf4, 0x16, 0x2a, 0xc8, 0x72, 0x48, 0x63, 0xad, 0xb7, 0xe1,
	0x02, 0xf2, 0x69, 0x44, 0x42, 0xb5, 0x40, 0xed, 0xb7, 0xb4, 0xc6, 0x46, 0x0e, 0x8d, 0x37, 0xa8,
	0x4b, 0x78, 0x57, 0x7f, 0x6f, 0x3d, 0x2d, 0xc1, 0x95, 0x54, 0x24, 0x6e, 0x31, 0xea, 0x8b, 0x0d,
	0x84, 0x63, 0x32, 0x2c, 0xba, 0xac, 0x5a, 0xc9, 0x44, 0x70, 0x4b, 0x27, 0x14, 0xdc, 0xf9, 0x99,
	0x07, 0xf7, 0x4c, 0xc1, 0xe0, 0xfe, 0x0a, 0xe0, 0x6a, 0x2a, 0xb8, 0x77, 0x45, 0x9a, 0xf3, 0x6d,
	0x37, 0x98, 0x6d, 0xdd, 0x9c, 0x4c, 0x8a, 0x25, 0xd5, 0x38, 0x9f, 0xaa, 0x46, 0xeb, 0x2f, 0x00,
	0x61, 0x87, 0x3b, 0x5b, 0x41, 0xc0, 0xe8, 0xee, 0x8c, 0x37, 0xa3, 0xbb, 0x70, 0x91, 0x07, 0x2a,
	0xef, 0x0a, 0x39, 0x11, 0x6b, 0x99, 0x61, 0x95, 0xfc, 0xab, 0x16, 0xf2, 0x0e, 0x19, 0x30, 0x8c,
	0x38, 0xde, 0xf2, 0x3c, 0x7a, 0x1f, 0x91, 0xc1, 0xa9, 0x0b, 0xc0, 0x4d, 0x7c, 0x5a, 0x03, 0xf0,
	0x37, 0x80, 0x8b, 0x1d, 0xee, 0x74, 0x5c, 0x12, 0x8a, 0xfd, 0xd1, 0x77, 0x49, 0x58, 0x78, 0x7f,
	0x54, 0x4a, 0x5e, 0xf8, 0x16, 0xf1, 0xb3, 0x72, 0xbd, 0x1d, 0x31, 0x22, 0x5c, 0xef, 0x47, 0xac,
	0xf0, 0x7a, 0x6b, 0x25, 0x29, 0xc8, 0x52, 0x41, 0xc8, 0xaf, 0x54, 0x47, 0x17, 0x90, 0x71, 0x0f,
	0x9b, 0x25, 0xe8, 0xc9, 0xf5, 0xb0, 0xd9, 0xad, 0xd3, 0x6f, 0x00, 0x96, 0xc5, 0x70, 0xc6, 0x30,
	0xfe, 0x1c, 0x8b, 0x5a, 0x1a, 0xc9, 0xab, 0x82, 0x11, 0x88, 0xb5, 0x88, 0x88, 0x6e, 0x53, 0xaf,
	0x70, 0x6d, 0x6a, 0x25, 0xd3, 0xfb, 0x8b, 0xb1, 0x0c, 0x4b, 0x34, 0x50, 0x7d, 0xb7, 0x5b, 0xa2,
	0x81, 0xf5, 0x44, 0x0d, 0x9c, 0x1f, 0x92, 0xd1, 0x4b, 0xe4, 0xd5, 0xf5, 0x1f, 0x56, 0xe0, 0x7c,
	0x87, 0x3b, 0xc6, 0x37, 0x00, 0xae, 0xde, 0x46, 0x64, 0xe8, 0xe1, 0x67, 0xce, 0x83, 0x9b, 0xc7,
	0x0e, 0xb7, 0xe3, 0x82, 0x66, 0xcd, 0x56, 0x54, 0x76, 0x1f, 0x71, 0x6c, 0xcb, 0x33, 0xe7, 0xee,
	0xb5, 0x3e, 0x0e, 0xd1, 0x35, 0xbb, 0x8b, 0x79, 0xe4, 0x85, 0x96, 0xf5, 0xe0, 0xc9, 0x9f, 0xdf,
	0x97, 0xd6, 0x4d, 0xb3, 0x35, 0xa6, 0xb2, 0x25, 0xd5, 0xa9, 0xbf, 0xc6, 0x03, 0x00, 0x2f, 0x24,
	0x1c, 0xc9, 0x70, 0x5f, 0xcf, 0x82, 0x88, 0xa5, 0x72, 0x10, 0xbc, 0x2e, 0x09, 0x36, 0xcc, 0xcb,
	0x53, 0x09, 0xe2, 0xb1, 0xde, 0xf8, 0x2e, 0x1d, 0x8c, 0xf4, 0xf1, 0x30, 0x33, 0x18, 0x29, 0xc1,
	0x1c, 0x28, 0x0d, 0x89, 0x62, 0x99, 0xb5, 0xa9, 0x28, 0xa9, 0xe3, 0xe0, 0x78, 0x48, 0x92, 0x73,
	0x42, 0x66, 0x48, 0x62, 0xa9, 0xc2, 0x21, 0x09, 0x63, 0x73, 0x0f, 0x01, 0x7c, 0x65, 0x02, 0x42,
	0x6e, 0x6f, 0x8d, 0x3c, 0x20, 0x42, 0x32, 0x07, 0xcc, 0x9b, 0x12, 0xa6, 0x6e, 0x5a, 0x99, 0x30,
	0x3d, 0xb1, 0x69, 0x19, 0x5f, 0xc2, 0xf3, 0x09, 0x50, 0x3c, 0x04, 0x5e, 0xc9, 0x62, 0xd1, 0x42,
	0x39, 0x30, 0xea, 0x12, 0xa3, 0x6a, 0xae, 0x4f, 0xc5, 0x40, 0xda, 0xd8, 0x4f, 0x00, 0x9a, 0x47,
	0x25, 0x33, 0x31, 0x8f, 0x35, 0x33, 0x0b, 0xe7, 0x59, 0xf1, 0x1c, 0x54, 0x2d, 0x49, 0xf5, 0x86,
	0xb9, 0x39, 0xbd, 0x7c, 0xb4, 0xc6, 0x1e, 0x4a, 0x08, 0xc6, 0x00, 0x27, 0xe7, 0xa5, 0x66, 0x76,
	0x32, 0xcf, 0x1a, 0x70, 0x88, 0x27, 0x00, 0x77, 0xe1, 0x52, 0xc2, 0x27, 0xc7, 0x99, 0x5a, 0x16,
	0x92, 0x90, 0xc8, 0x41, 0xf1, 0x9a, 0xa4, 0xb8, 0x64, 0xbe, 0x3a, 0x95, 0x42, 0x0c, 0x3a, 0x63,
	0x76, 0xe5, 0x2c, 0x91, 0x69, 0x57, 0x48, 0x14, 0xb6, 0x2b, 0x9a, 0xb7, 0xf1, 0x75, 0xba, 0x92,
	0x93, 0xf9, 0xa0, 0xfe, 0x7f, 0xc6, 0x73, 0x16, 0xcf, 0x55, 0x09, 0x50, 0x33, 0xab, 0xc7, 0x02,
	0xa8, 0xc2, 0x19, 0x4b, 0x8b, 0xc9, 0x03, 0x61, 0x33, 0x4f, 0x3d, 0x27, 0xe2, 0x85, 0xd3, 0x22,
	0x29, 0x6a, 0x9a, 0x10, 0x7c, 0x01, 0x57, 0x8e, 0x5a, 0x80, 0x6a, 0xb6, 0x56, 0x66, 0x03, 0x90,
	0x32, 0x39, 0x48, 0xae, 0x48, 0x92, 0xcb, 0xe6, 0xa5, 0xe9, 0xdb, 0xbf, 0x32, 0x35, 0xb6, 0xdd,
	0x26, 0xdd, 0x3e, 0x73, 0x91, 0x62, 0xa9, 0xc2, 0xdb, 0x6d, 0xa4, 0x15, 0xb5, 0x37, 0x1f, 0x1f,
	0x54, 0xc1, 0xde, 0x41, 0x15, 0xfc, 0x71, 0x50, 0x05, 0x8f, 0x0e, 0xab, 0x73, 0x7b, 0x87, 0xd5,
	0xb9, 0xdf, 0x0f, 0xab, 0x73, 0x1f, 0x2f, 0x7d, 0x1a, 0x07, 0x4e, 0x34, 0xfe, 0xfe, 0x82, 0xfc,
	0x21, 0xf7, 0xed, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x32, 0xfa, 0xca, 0x0d, 0x4a, 0x16, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	HandleMsgIssueCreate(ctx context.Context, in *MsgIssueCreate, opts ...grpc.CallOption) (*types.Result, error)
	HandleMsgFeatures(ctx context.Context, in *MsgFeatures, opts ...grpc.CallOption) (*types.Result, error)
	HandleMsgDescription(ctx context.Context, in *MsgDescription, opts ...grpc.CallOption) (*types.Result, error)
	HandleMsgTransfer(ctx context.Context, in *MsgTransfer, opts ...grpc.CallOption) (*types.Result, error)
	HandleMsgTransferFrom(ctx context.Context, in *MsgTransferFrom, opts ...grpc.CallOption) (*types.Result, error)
	HandleMsgApprove(ctx context.Context, in *MsgApprove, opts ...grpc.CallOption) (*types.Result, error)
	HandleMsgIncreaseAllowance(ctx context.Context, in *MsgIncreaseAllowance, opts ...grpc.CallOption) (*types.Result, error)
	HandleMsgDecreaseAllowance(ctx context.Context, in *MsgDecreaseAllowance, opts ...grpc.CallOption) (*types.Result, error)
	HandleMsgMint(ctx context.Context, in *MsgMint, opts ...grpc.CallOption) (*types.Result, error)
	HandleMsgBurn(ctx context.Context, in *MsgBurn, opts ...grpc.CallOption) (*types.Result, error)
	HandleMsgBurnFrom(ctx context.Context, in *MsgBurnFrom, opts ...grpc.CallOption) (*types.Result, error)
	HandleMsgTransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*types.Result, error)
	HandleMsgFreeze(ctx context.Context, in *MsgFreeze, opts ...grpc.CallOption) (*types.Result, error)
	HandleMsgUnfreeze(ctx context.Context, in *MsgUnfreeze, opts ...grpc.CallOption) (*types.Result, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) HandleMsgIssueCreate(ctx context.Context, in *MsgIssueCreate, opts ...grpc.CallOption) (*types.Result, error) {
	out := new(types.Result)
	err := c.cc.Invoke(ctx, "/konstellation.sdk.issue.Msg/HandleMsgIssueCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgFeatures(ctx context.Context, in *MsgFeatures, opts ...grpc.CallOption) (*types.Result, error) {
	out := new(types.Result)
	err := c.cc.Invoke(ctx, "/konstellation.sdk.issue.Msg/HandleMsgFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgDescription(ctx context.Context, in *MsgDescription, opts ...grpc.CallOption) (*types.Result, error) {
	out := new(types.Result)
	err := c.cc.Invoke(ctx, "/konstellation.sdk.issue.Msg/HandleMsgDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgTransfer(ctx context.Context, in *MsgTransfer, opts ...grpc.CallOption) (*types.Result, error) {
	out := new(types.Result)
	err := c.cc.Invoke(ctx, "/konstellation.sdk.issue.Msg/HandleMsgTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgTransferFrom(ctx context.Context, in *MsgTransferFrom, opts ...grpc.CallOption) (*types.Result, error) {
	out := new(types.Result)
	err := c.cc.Invoke(ctx, "/konstellation.sdk.issue.Msg/HandleMsgTransferFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgApprove(ctx context.Context, in *MsgApprove, opts ...grpc.CallOption) (*types.Result, error) {
	out := new(types.Result)
	err := c.cc.Invoke(ctx, "/konstellation.sdk.issue.Msg/HandleMsgApprove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgIncreaseAllowance(ctx context.Context, in *MsgIncreaseAllowance, opts ...grpc.CallOption) (*types.Result, error) {
	out := new(types.Result)
	err := c.cc.Invoke(ctx, "/konstellation.sdk.issue.Msg/HandleMsgIncreaseAllowance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgDecreaseAllowance(ctx context.Context, in *MsgDecreaseAllowance, opts ...grpc.CallOption) (*types.Result, error) {
	out := new(types.Result)
	err := c.cc.Invoke(ctx, "/konstellation.sdk.issue.Msg/HandleMsgDecreaseAllowance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgMint(ctx context.Context, in *MsgMint, opts ...grpc.CallOption) (*types.Result, error) {
	out := new(types.Result)
	err := c.cc.Invoke(ctx, "/konstellation.sdk.issue.Msg/HandleMsgMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgBurn(ctx context.Context, in *MsgBurn, opts ...grpc.CallOption) (*types.Result, error) {
	out := new(types.Result)
	err := c.cc.Invoke(ctx, "/konstellation.sdk.issue.Msg/HandleMsgBurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgBurnFrom(ctx context.Context, in *MsgBurnFrom, opts ...grpc.CallOption) (*types.Result, error) {
	out := new(types.Result)
	err := c.cc.Invoke(ctx, "/konstellation.sdk.issue.Msg/HandleMsgBurnFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgTransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*types.Result, error) {
	out := new(types.Result)
	err := c.cc.Invoke(ctx, "/konstellation.sdk.issue.Msg/HandleMsgTransferOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgFreeze(ctx context.Context, in *MsgFreeze, opts ...grpc.CallOption) (*types.Result, error) {
	out := new(types.Result)
	err := c.cc.Invoke(ctx, "/konstellation.sdk.issue.Msg/HandleMsgFreeze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleMsgUnfreeze(ctx context.Context, in *MsgUnfreeze, opts ...grpc.CallOption) (*types.Result, error) {
	out := new(types.Result)
	err := c.cc.Invoke(ctx, "/konstellation.sdk.issue.Msg/HandleMsgUnfreeze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	HandleMsgIssueCreate(context.Context, *MsgIssueCreate) (*types.Result, error)
	HandleMsgFeatures(context.Context, *MsgFeatures) (*types.Result, error)
	HandleMsgDescription(context.Context, *MsgDescription) (*types.Result, error)
	HandleMsgTransfer(context.Context, *MsgTransfer) (*types.Result, error)
	HandleMsgTransferFrom(context.Context, *MsgTransferFrom) (*types.Result, error)
	HandleMsgApprove(context.Context, *MsgApprove) (*types.Result, error)
	HandleMsgIncreaseAllowance(context.Context, *MsgIncreaseAllowance) (*types.Result, error)
	HandleMsgDecreaseAllowance(context.Context, *MsgDecreaseAllowance) (*types.Result, error)
	HandleMsgMint(context.Context, *MsgMint) (*types.Result, error)
	HandleMsgBurn(context.Context, *MsgBurn) (*types.Result, error)
	HandleMsgBurnFrom(context.Context, *MsgBurnFrom) (*types.Result, error)
	HandleMsgTransferOwnership(context.Context, *MsgTransferOwnership) (*types.Result, error)
	HandleMsgFreeze(context.Context, *MsgFreeze) (*types.Result, error)
	HandleMsgUnfreeze(context.Context, *MsgUnfreeze) (*types.Result, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) HandleMsgIssueCreate(ctx context.Context, req *MsgIssueCreate) (*types.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgIssueCreate not implemented")
}
func (*UnimplementedMsgServer) HandleMsgFeatures(ctx context.Context, req *MsgFeatures) (*types.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgFeatures not implemented")
}
func (*UnimplementedMsgServer) HandleMsgDescription(ctx context.Context, req *MsgDescription) (*types.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgDescription not implemented")
}
func (*UnimplementedMsgServer) HandleMsgTransfer(ctx context.Context, req *MsgTransfer) (*types.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgTransfer not implemented")
}
func (*UnimplementedMsgServer) HandleMsgTransferFrom(ctx context.Context, req *MsgTransferFrom) (*types.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgTransferFrom not implemented")
}
func (*UnimplementedMsgServer) HandleMsgApprove(ctx context.Context, req *MsgApprove) (*types.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgApprove not implemented")
}
func (*UnimplementedMsgServer) HandleMsgIncreaseAllowance(ctx context.Context, req *MsgIncreaseAllowance) (*types.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgIncreaseAllowance not implemented")
}
func (*UnimplementedMsgServer) HandleMsgDecreaseAllowance(ctx context.Context, req *MsgDecreaseAllowance) (*types.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgDecreaseAllowance not implemented")
}
func (*UnimplementedMsgServer) HandleMsgMint(ctx context.Context, req *MsgMint) (*types.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgMint not implemented")
}
func (*UnimplementedMsgServer) HandleMsgBurn(ctx context.Context, req *MsgBurn) (*types.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgBurn not implemented")
}
func (*UnimplementedMsgServer) HandleMsgBurnFrom(ctx context.Context, req *MsgBurnFrom) (*types.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgBurnFrom not implemented")
}
func (*UnimplementedMsgServer) HandleMsgTransferOwnership(ctx context.Context, req *MsgTransferOwnership) (*types.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgTransferOwnership not implemented")
}
func (*UnimplementedMsgServer) HandleMsgFreeze(ctx context.Context, req *MsgFreeze) (*types.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgFreeze not implemented")
}
func (*UnimplementedMsgServer) HandleMsgUnfreeze(ctx context.Context, req *MsgUnfreeze) (*types.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMsgUnfreeze not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_HandleMsgIssueCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIssueCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgIssueCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.sdk.issue.Msg/HandleMsgIssueCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgIssueCreate(ctx, req.(*MsgIssueCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFeatures)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.sdk.issue.Msg/HandleMsgFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgFeatures(ctx, req.(*MsgFeatures))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.sdk.issue.Msg/HandleMsgDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgDescription(ctx, req.(*MsgDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.sdk.issue.Msg/HandleMsgTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgTransfer(ctx, req.(*MsgTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgTransferFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferFrom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgTransferFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.sdk.issue.Msg/HandleMsgTransferFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgTransferFrom(ctx, req.(*MsgTransferFrom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApprove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.sdk.issue.Msg/HandleMsgApprove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgApprove(ctx, req.(*MsgApprove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgIncreaseAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIncreaseAllowance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgIncreaseAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.sdk.issue.Msg/HandleMsgIncreaseAllowance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgIncreaseAllowance(ctx, req.(*MsgIncreaseAllowance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgDecreaseAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDecreaseAllowance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgDecreaseAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.sdk.issue.Msg/HandleMsgDecreaseAllowance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgDecreaseAllowance(ctx, req.(*MsgDecreaseAllowance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.sdk.issue.Msg/HandleMsgMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgMint(ctx, req.(*MsgMint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgBurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgBurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.sdk.issue.Msg/HandleMsgBurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgBurn(ctx, req.(*MsgBurn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgBurnFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnFrom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgBurnFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.sdk.issue.Msg/HandleMsgBurnFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgBurnFrom(ctx, req.(*MsgBurnFrom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgTransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferOwnership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgTransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.sdk.issue.Msg/HandleMsgTransferOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgTransferOwnership(ctx, req.(*MsgTransferOwnership))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgFreeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFreeze)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgFreeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.sdk.issue.Msg/HandleMsgFreeze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgFreeze(ctx, req.(*MsgFreeze))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleMsgUnfreeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnfreeze)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleMsgUnfreeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.sdk.issue.Msg/HandleMsgUnfreeze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleMsgUnfreeze(ctx, req.(*MsgUnfreeze))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "konstellation.sdk.issue.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleMsgIssueCreate",
			Handler:    _Msg_HandleMsgIssueCreate_Handler,
		},
		{
			MethodName: "HandleMsgFeatures",
			Handler:    _Msg_HandleMsgFeatures_Handler,
		},
		{
			MethodName: "HandleMsgDescription",
			Handler:    _Msg_HandleMsgDescription_Handler,
		},
		{
			MethodName: "HandleMsgTransfer",
			Handler:    _Msg_HandleMsgTransfer_Handler,
		},
		{
			MethodName: "HandleMsgTransferFrom",
			Handler:    _Msg_HandleMsgTransferFrom_Handler,
		},
		{
			MethodName: "HandleMsgApprove",
			Handler:    _Msg_HandleMsgApprove_Handler,
		},
		{
			MethodName: "HandleMsgIncreaseAllowance",
			Handler:    _Msg_HandleMsgIncreaseAllowance_Handler,
		},
		{
			MethodName: "HandleMsgDecreaseAllowance",
			Handler:    _Msg_HandleMsgDecreaseAllowance_Handler,
		},
		{
			MethodName: "HandleMsgMint",
			Handler:    _Msg_HandleMsgMint_Handler,
		},
		{
			MethodName: "HandleMsgBurn",
			Handler:    _Msg_HandleMsgBurn_Handler,
		},
		{
			MethodName: "HandleMsgBurnFrom",
			Handler:    _Msg_HandleMsgBurnFrom_Handler,
		},
		{
			MethodName: "HandleMsgTransferOwnership",
			Handler:    _Msg_HandleMsgTransferOwnership_Handler,
		},
		{
			MethodName: "HandleMsgFreeze",
			Handler:    _Msg_HandleMsgFreeze_Handler,
		},
		{
			MethodName: "HandleMsgUnfreeze",
			Handler:    _Msg_HandleMsgUnfreeze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg.proto",
}

func (m *MsgIssueCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IssueParams != nil {
		{
			size, err := m.IssueParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Issuer.Size()
		i -= size
		if _, err := m.Issuer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Owner.Size()
		i -= size
		if _, err := m.Owner.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDescription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDescription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Owner.Size()
		i -= size
		if _, err := m.Owner.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDisableFeature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableFeature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableFeature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Feature) > 0 {
		i -= len(m.Feature)
		copy(dAtA[i:], m.Feature)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Feature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Owner.Size()
		i -= size
		if _, err := m.Owner.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgEnableFeature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEnableFeature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEnableFeature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Feature) > 0 {
		i -= len(m.Feature)
		copy(dAtA[i:], m.Feature)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Feature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Owner.Size()
		i -= size
		if _, err := m.Owner.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgFeatures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFeatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFeatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IssueFeatures != nil {
		{
			size, err := m.IssueFeatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Owner.Size()
		i -= size
		if _, err := m.Owner.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ToAddress.Size()
		i -= size
		if _, err := m.ToAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.FromAddress.Size()
		i -= size
		if _, err := m.FromAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgTransferFrom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferFrom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferFrom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ToAddress.Size()
		i -= size
		if _, err := m.ToAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.FromAddress.Size()
		i -= size
		if _, err := m.FromAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Sender.Size()
		i -= size
		if _, err := m.Sender.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgTransferOwnership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferOwnership) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferOwnership) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.ToAddress.Size()
		i -= size
		if _, err := m.ToAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Owner.Size()
		i -= size
		if _, err := m.Owner.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgApprove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApprove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApprove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Spender.Size()
		i -= size
		if _, err := m.Spender.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Owner.Size()
		i -= size
		if _, err := m.Owner.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgIncreaseAllowance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIncreaseAllowance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIncreaseAllowance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Spender.Size()
		i -= size
		if _, err := m.Spender.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Owner.Size()
		i -= size
		if _, err := m.Owner.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDecreaseAllowance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDecreaseAllowance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDecreaseAllowance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Spender.Size()
		i -= size
		if _, err := m.Spender.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Owner.Size()
		i -= size
		if _, err := m.Owner.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgMint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ToAddress.Size()
		i -= size
		if _, err := m.ToAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Minter.Size()
		i -= size
		if _, err := m.Minter.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgBurn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Burner.Size()
		i -= size
		if _, err := m.Burner.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgBurnFrom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnFrom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnFrom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.FromAddress.Size()
		i -= size
		if _, err := m.FromAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Burner.Size()
		i -= size
		if _, err := m.Burner.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgFreeze) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFreeze) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFreeze) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Op) > 0 {
		i -= len(m.Op)
		copy(dAtA[i:], m.Op)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Op)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Holder.Size()
		i -= size
		if _, err := m.Holder.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Freezer.Size()
		i -= size
		if _, err := m.Freezer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgUnfreeze) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnfreeze) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnfreeze) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Op) > 0 {
		i -= len(m.Op)
		copy(dAtA[i:], m.Op)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Op)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Holder.Size()
		i -= size
		if _, err := m.Holder.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Freezer.Size()
		i -= size
		if _, err := m.Freezer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgIssueCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.Issuer.Size()
	n += 1 + l + sovMsg(uint64(l))
	if m.IssueParams != nil {
		l = m.IssueParams.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgDisableFeature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Feature)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgEnableFeature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Feature)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgFeatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.IssueFeatures != nil {
		l = m.IssueFeatures.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FromAddress.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.ToAddress.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovMsg(uint64(l))
	return n
}

func (m *MsgTransferFrom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Sender.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.FromAddress.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.ToAddress.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovMsg(uint64(l))
	return n
}

func (m *MsgTransferOwnership) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.ToAddress.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgApprove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.Spender.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovMsg(uint64(l))
	return n
}

func (m *MsgIncreaseAllowance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.Spender.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovMsg(uint64(l))
	return n
}

func (m *MsgDecreaseAllowance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.Spender.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovMsg(uint64(l))
	return n
}

func (m *MsgMint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Minter.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.ToAddress.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovMsg(uint64(l))
	return n
}

func (m *MsgBurn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Burner.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovMsg(uint64(l))
	return n
}

func (m *MsgBurnFrom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Burner.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.FromAddress.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovMsg(uint64(l))
	return n
}

func (m *MsgFreeze) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Freezer.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.Holder.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Op)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgUnfreeze) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Freezer.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.Holder.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Op)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgIssueCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Issuer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssueParams == nil {
				m.IssueParams = &IssueParams{}
			}
			if err := m.IssueParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisableFeature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableFeature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableFeature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEnableFeature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEnableFeature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEnableFeature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFeatures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFeatures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFeatures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueFeatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssueFeatures == nil {
				m.IssueFeatures = &IssueFeatures{}
			}
			if err := m.IssueFeatures.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FromAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ToAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferFrom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferFrom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferFrom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FromAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ToAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferOwnership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferOwnership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferOwnership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ToAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApprove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApprove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApprove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIncreaseAllowance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIncreaseAllowance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIncreaseAllowance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDecreaseAllowance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDecreaseAllowance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDecreaseAllowance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Minter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ToAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Burner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnFrom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnFrom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnFrom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Burner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FromAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFreeze) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFreeze: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFreeze: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Freezer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Freezer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Holder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Op = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnfreeze) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnfreeze: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnfreeze: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Freezer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Freezer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Holder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Op = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsg = fmt.Errorf("proto: unexpected end of group")
)
