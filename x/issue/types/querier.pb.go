// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: querier.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IssueFeatures struct {
	BurnOwnerDisabled  bool `protobuf:"varint,1,opt,name=burn_owner_disabled,json=burnOwnerDisabled,proto3" json:"burn_owner_disabled,omitempty"`
	BurnHolderDisabled bool `protobuf:"varint,2,opt,name=burn_holder_disabled,json=burnHolderDisabled,proto3" json:"burn_holder_disabled,omitempty"`
	BurnFromDisabled   bool `protobuf:"varint,3,opt,name=burn_from_disabled,json=burnFromDisabled,proto3" json:"burn_from_disabled,omitempty"`
	MintDisabled       bool `protobuf:"varint,4,opt,name=mint_disabled,json=mintDisabled,proto3" json:"mint_disabled,omitempty"`
	FreezeDisabled     bool `protobuf:"varint,5,opt,name=freeze_disabled,json=freezeDisabled,proto3" json:"freeze_disabled,omitempty"`
}

func (m *IssueFeatures) Reset()         { *m = IssueFeatures{} }
func (m *IssueFeatures) String() string { return proto.CompactTextString(m) }
func (*IssueFeatures) ProtoMessage()    {}
func (*IssueFeatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_7edfe438abd6b96f, []int{0}
}
func (m *IssueFeatures) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IssueFeatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IssueFeatures.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IssueFeatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueFeatures.Merge(m, src)
}
func (m *IssueFeatures) XXX_Size() int {
	return m.Size()
}
func (m *IssueFeatures) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueFeatures.DiscardUnknown(m)
}

var xxx_messageInfo_IssueFeatures proto.InternalMessageInfo

func (m *IssueFeatures) GetBurnOwnerDisabled() bool {
	if m != nil {
		return m.BurnOwnerDisabled
	}
	return false
}

func (m *IssueFeatures) GetBurnHolderDisabled() bool {
	if m != nil {
		return m.BurnHolderDisabled
	}
	return false
}

func (m *IssueFeatures) GetBurnFromDisabled() bool {
	if m != nil {
		return m.BurnFromDisabled
	}
	return false
}

func (m *IssueFeatures) GetMintDisabled() bool {
	if m != nil {
		return m.MintDisabled
	}
	return false
}

func (m *IssueFeatures) GetFreezeDisabled() bool {
	if m != nil {
		return m.FreezeDisabled
	}
	return false
}

type IssueParams struct {
	Denom          string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Symbol         string                                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	TotalSupply    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=total_supply,json=totalSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_supply"`
	Decimals       uint32                                 `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Description    string                                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	*IssueFeatures `protobuf:"bytes,6,opt,name=issue_features,json=issueFeatures,proto3,embedded=issue_features" json:"issue_features,omitempty"`
}

func (m *IssueParams) Reset()         { *m = IssueParams{} }
func (m *IssueParams) String() string { return proto.CompactTextString(m) }
func (*IssueParams) ProtoMessage()    {}
func (*IssueParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_7edfe438abd6b96f, []int{1}
}
func (m *IssueParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IssueParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IssueParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IssueParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueParams.Merge(m, src)
}
func (m *IssueParams) XXX_Size() int {
	return m.Size()
}
func (m *IssueParams) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueParams.DiscardUnknown(m)
}

var xxx_messageInfo_IssueParams proto.InternalMessageInfo

func (m *IssueParams) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *IssueParams) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *IssueParams) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *IssueParams) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type IssuesParams struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Limit int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *IssuesParams) Reset()         { *m = IssuesParams{} }
func (m *IssuesParams) String() string { return proto.CompactTextString(m) }
func (*IssuesParams) ProtoMessage()    {}
func (*IssuesParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_7edfe438abd6b96f, []int{2}
}
func (m *IssuesParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IssuesParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IssuesParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IssuesParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuesParams.Merge(m, src)
}
func (m *IssuesParams) XXX_Size() int {
	return m.Size()
}
func (m *IssuesParams) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuesParams.DiscardUnknown(m)
}

var xxx_messageInfo_IssuesParams proto.InternalMessageInfo

func (m *IssuesParams) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *IssuesParams) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func init() {
	proto.RegisterType((*IssueFeatures)(nil), "konstellation.issue.IssueFeatures")
	proto.RegisterType((*IssueParams)(nil), "konstellation.issue.IssueParams")
	proto.RegisterType((*IssuesParams)(nil), "konstellation.issue.IssuesParams")
}

func init() { proto.RegisterFile("querier.proto", fileDescriptor_7edfe438abd6b96f) }

var fileDescriptor_7edfe438abd6b96f = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0xb1, 0x56, 0xab, 0xdb, 0x0c, 0xf0, 0x2a, 0x34, 0xed, 0x90, 0x56, 0x45, 0x62,
	0x3b, 0x80, 0x8b, 0xe0, 0xc6, 0xb1, 0x42, 0x13, 0x3b, 0x0d, 0xcc, 0x8d, 0x4b, 0x94, 0x34, 0x6e,
	0x67, 0xcd, 0xce, 0x0b, 0xb6, 0x23, 0x28, 0x9f, 0x82, 0x2f, 0xc0, 0xf7, 0xd9, 0xb1, 0x47, 0xc4,
	0xa1, 0x42, 0xed, 0x99, 0xef, 0x80, 0xfc, 0xd2, 0xb5, 0x45, 0xe2, 0x94, 0xbc, 0xff, 0xff, 0x67,
	0x27, 0xff, 0xf7, 0x1e, 0x8d, 0x3e, 0x57, 0xd2, 0x2a, 0x69, 0x79, 0x69, 0xc1, 0x03, 0x3b, 0xb9,
	0x85, 0xc2, 0x79, 0xa9, 0x75, 0xea, 0x15, 0x14, 0x5c, 0x39, 0x57, 0xc9, 0xb3, 0xde, 0x0c, 0x66,
	0x80, 0xfe, 0x28, 0xbc, 0xd5, 0xe8, 0xf0, 0x0f, 0xa1, 0xd1, 0x55, 0xf0, 0x2f, 0x65, 0xea, 0x2b,
	0x2b, 0x1d, 0xe3, 0xf4, 0x24, 0xab, 0x6c, 0x91, 0xc0, 0x97, 0x42, 0xda, 0x24, 0x57, 0x2e, 0xcd,
	0xb4, 0xcc, 0x4f, 0xc9, 0x80, 0x5c, 0x1c, 0x89, 0xc7, 0xc1, 0xba, 0x0e, 0xce, 0xdb, 0x8d, 0xc1,
	0x5e, 0xd2, 0x1e, 0xf2, 0x37, 0xa0, 0xf3, 0xfd, 0x03, 0x07, 0x78, 0x80, 0x05, 0xef, 0x1d, 0x5a,
	0xdb, 0x13, 0xcf, 0x29, 0xaa, 0xc9, 0xd4, 0x82, 0xd9, 0xf1, 0x0f, 0x90, 0x7f, 0x14, 0x9c, 0x4b,
	0x0b, 0x66, 0x4b, 0x3f, 0xa5, 0x91, 0x51, 0x85, 0xdf, 0x81, 0x87, 0x08, 0x76, 0x83, 0xb8, 0x85,
	0xce, 0xe9, 0xc3, 0xa9, 0x95, 0xf2, 0x9b, 0xdc, 0x61, 0x4d, 0xc4, 0x8e, 0x6b, 0xf9, 0x1e, 0x1c,
	0xfe, 0x38, 0xa0, 0x1d, 0xcc, 0xfb, 0x3e, 0xb5, 0xa9, 0x71, 0xac, 0x47, 0x9b, 0xb9, 0x2c, 0xc0,
	0x60, 0xbe, 0xb6, 0xa8, 0x0b, 0xf6, 0x84, 0xb6, 0xdc, 0xdc, 0x64, 0xa0, 0x31, 0x45, 0x5b, 0x6c,
	0x2a, 0xf6, 0x81, 0x76, 0x3d, 0xf8, 0x54, 0x27, 0xae, 0x2a, 0x4b, 0x3d, 0xc7, 0x7f, 0x6e, 0x8f,
	0xf9, 0xdd, 0xb2, 0xdf, 0xf8, 0xb5, 0xec, 0x3f, 0x9b, 0x29, 0x7f, 0x53, 0x65, 0x7c, 0x02, 0x66,
	0x34, 0x01, 0x67, 0xc0, 0x6d, 0x1e, 0x2f, 0x5c, 0x7e, 0x3b, 0xf2, 0xf3, 0x52, 0x3a, 0x7e, 0x55,
	0x78, 0xd1, 0xc1, 0x3b, 0x3e, 0xe2, 0x15, 0xec, 0x8c, 0x1e, 0xe5, 0x72, 0xa2, 0x4c, 0xaa, 0x1d,
	0x26, 0x8b, 0xc4, 0xb6, 0x66, 0x03, 0xda, 0xc9, 0xa5, 0x9b, 0x58, 0x55, 0x86, 0x39, 0x62, 0xa2,
	0xb6, 0xd8, 0x97, 0xd8, 0x35, 0x3d, 0xc6, 0xe9, 0x26, 0xd3, 0xcd, 0xf8, 0x4e, 0x5b, 0x03, 0x72,
	0xd1, 0x79, 0x35, 0xe4, 0xff, 0x59, 0x01, 0xfe, 0xcf, 0xa0, 0xc7, 0x87, 0x8b, 0x65, 0x9f, 0x88,
	0x48, 0xed, 0x8b, 0xc3, 0x37, 0xb4, 0x8b, 0x94, 0xdb, 0xf5, 0x07, 0x17, 0xe1, 0xbe, 0x3f, 0x58,
	0x04, 0x55, 0x2b, 0xa3, 0x3c, 0xb6, 0xa7, 0x29, 0xea, 0x62, 0x7c, 0x7e, 0xb7, 0x8a, 0xc9, 0x62,
	0x15, 0x93, 0xdf, 0xab, 0x98, 0x7c, 0x5f, 0xc7, 0x8d, 0xc5, 0x3a, 0x6e, 0xfc, 0x5c, 0xc7, 0x8d,
	0x4f, 0xd1, 0xd7, 0x11, 0x7e, 0xa6, 0x6e, 0x42, 0xd6, 0xc2, 0xdd, 0x7b, 0xfd, 0x37, 0x00, 0x00,
	0xff, 0xff, 0xa8, 0x9e, 0x34, 0xe3, 0xb7, 0x02, 0x00, 0x00,
}

func (m *IssueFeatures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssueFeatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssueFeatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FreezeDisabled {
		i--
		if m.FreezeDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.MintDisabled {
		i--
		if m.MintDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.BurnFromDisabled {
		i--
		if m.BurnFromDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.BurnHolderDisabled {
		i--
		if m.BurnHolderDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BurnOwnerDisabled {
		i--
		if m.BurnOwnerDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IssueParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssueParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssueParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IssueFeatures != nil {
		{
			size, err := m.IssueFeatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Decimals != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.TotalSupply.Size()
		i -= size
		if _, err := m.TotalSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IssuesParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssuesParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssuesParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuerier(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IssueFeatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BurnOwnerDisabled {
		n += 2
	}
	if m.BurnHolderDisabled {
		n += 2
	}
	if m.BurnFromDisabled {
		n += 2
	}
	if m.MintDisabled {
		n += 2
	}
	if m.FreezeDisabled {
		n += 2
	}
	return n
}

func (m *IssueParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	l = m.TotalSupply.Size()
	n += 1 + l + sovQuerier(uint64(l))
	if m.Decimals != 0 {
		n += 1 + sovQuerier(uint64(m.Decimals))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.IssueFeatures != nil {
		l = m.IssueFeatures.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *IssuesParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovQuerier(uint64(m.Limit))
	}
	return n
}

func sovQuerier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerier(x uint64) (n int) {
	return sovQuerier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IssueFeatures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssueFeatures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssueFeatures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnOwnerDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnOwnerDisabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnHolderDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnHolderDisabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnFromDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnFromDisabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MintDisabled = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreezeDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FreezeDisabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IssueParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssueParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssueParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueFeatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssueFeatures == nil {
				m.IssueFeatures = &IssueFeatures{}
			}
			if err := m.IssueFeatures.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IssuesParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssuesParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssuesParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerier = fmt.Errorf("proto: unexpected end of group")
)
