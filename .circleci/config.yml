# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2

defaults: &build_defaults
  working_directory: /go/src/github.com/konstellation/konstellation
  docker:
    - image: circleci/golang:1.13
  environment:
#    GOBIN: /tmp/workspace/bin

deps: &dependencies
  run:
    name: dependencies
    command: |
      export PATH="$PATH:$GOBIN"
#      export PATH="$PATH:/tmp/workspace/bin"

jobs:
  build:
    <<: *build_defaults
    steps:
      - checkout
      - run:
          name: run build
          command: |
            go build -v ./client/konstellation
            go build -v ./client/konstellationcli
            go build -v ./client/konstellationlcd
      - run:
          name: run tests
          command: |
            go fmt ./...
            go vet ./...
            go test -v ./...
  deploy:
    <<: *build_defaults
    steps:
      - checkout
#      - run: mkdir -p /tmp/workspace/bin
      - run: mkdir -p /dist
      - *dependencies
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go env
      - run: go get -u github.com/mitchellh/gox
      - run: go get github.com/mitchellh/gox
#      - run: ls /tmp/workspace
#      - run: ls /tmp/workspace/bin
      - run: echo $PATH
#      - run: go get -u github.com/tcnksm/ghr
#      - run: go get -u github.com/stevenmatthewt/semantics
      - run:
          name: cross compile
          command: |
            gox -os="linux darwin windows" -arch="amd64 386" -output="/dist/{{.OS}}_{{.Arch}}/konstellation" ./client/konstellation
            gox -os="linux darwin windows" -arch="amd64 386" -output="/dist/{{.OS}}_{{.Arch}}/konstellationlcd" ./client/konstellationlcd
            cd dist/ && for dir in ./*; do base=$(basename "$dir"); tar -czf "${base}.tar.gz" $dir; done
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
#      - persist_to_workspace:
#          root: /tmp/workspace
#          paths:
#            - bin
      - store_artifacts:
          path: /dist/linux_386/konstellation
          destination: linux/386/konstellation
      - store_artifacts:
          path: /dist/linux_amd64/konstellation
          destination: linux/amd64/konstellation
      - store_artifacts:
          path: /dist/windows_386/konstellation
          destination: windows/386/konstellation
      - store_artifacts:
          path: /dist/windows_amd64/konstellation
          destination: windows/amd64/konstellation
      - store_artifacts:
          path: /dist/darwin_386/konstellation
          destination: macos/386/konstellation
      - store_artifacts:
          path: /dist/darwin_amd64/konstellation
          destination: macos/amd64/konstellation
#      - store_artifacts:
#          path: /tmp/workspace/bin/konstellationcli
#          destination: linux/konstellationcli
#      - store_artifacts:
#          path: /tmp/workspace/bin/konstellationlcd
#          destination: linux/konstellationlcd
#      - add_ssh_keys:
#          fingerprints:
#            - "37:e7:cd:57:3d:2e:58:5d:15:a4:d0:71:ab:15:75:57"
#      - run:
#          name: create release
#          command: |
#            tag=$(semantics --output-tag)
#            if [ "$tag" ]; then
#              ghr -t $GITHUB_TOKEN -u $CIRCLE_PROJECT_USERNAME -r $CIRCLE_PROJECT_REPONAME --replace $tag dist/
#            else
#              echo "The commit message(s) did not indicate a major/minor/patch version."
#            fi

#  build:
#    steps:
#      - checkout

#      - run:
#          name: tools
#          command: |
#            export PATH="$GOBIN:$PATH"
#            make tools
#      - *dependencies
#      - run:
#          name: binaries
#          command: |
#            export PATH="$GOBIN:$PATH"
#            make install

workflows:
  version: 2
  build-konstellation:
    jobs:
      - build:
          # filters here are needed to enable this job also for tags
          filters:
            tags:
              only:
                - /^v.*/
      - deploy:
          requires:
            - build